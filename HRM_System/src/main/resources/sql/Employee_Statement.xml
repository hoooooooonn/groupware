<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.min.edu.model.mapper.IEmployeeDao">

	<!-- 로그인 getLogin -->
	<select id="getLogin" resultType="EmployeeDto">
		SELECT EMP_ID,NAME,
			   POSITION, 
			   EMAIL,
			   LOGIN_AUTH,ROLE
		FROM EMPLOYEE
		WHERE trim(EMP_ID) = trim(#{empId})
		AND
		trim(PASSWORD) = trim(#{password})

	</select>

	<!--사원번호로 사용자 조회 findById -->
	<select id="findById" resultType="java.lang.String">
		SELECT EMP_ID
		FROM EMPLOYEE
		WHERE trim(EMP_ID) = trim(#{emp_id})
	</select>

	<!--비밀번호 재설정 modifyPw -->
	<update id="modifyPw">
    UPDATE EMPLOYEE
    SET PASSWORD = TRIM(#{password})
    WHERE TRIM(EMP_ID) = TRIM(#{emp_id})
	</update>


	<!--사용자가 관리자인지 확인 checkAd -->
	<select id="checkAd" resultType="java.lang.String">
		SELECT EMP_ID
		FROM EMPLOYEE
		WHERE trim(ROLE) = trim(#{role})
	</select>


	<!--사용자는 전체 사원을 조회할 수 있다 getAllUserStatus -->
	<select id="userSelectAll" resultType="EmployeeDto">
		SELECT NAME,POSITION,EMAIL,DEPT_NAME
		FROM EMPLOYEE e
		JOIN DEPT d ON e.DEPT_ID =d.DEPT_ID
	</select>


	<!-- 사원 조회 (이름 또는 부서 조건 사용) -->
	<select id="getEmployeeByNameOrDept" resultType="EmployeeDto">
	SELECT
		E.NAME
		E.POSITION,
		D.DEPT_NAME,
		E.EMAIL
		FROM
		EMPLOYEE E
	JOIN
	DEPT D ON E.DEPT_ID = D.DEPT_ID
	WHERE
	<if test="name != null or deptId != null">
		<!-- name 조건이 있을 때 -->
		<if test="name != null">
			trim(E.NAME) LIKE '%' || trim(#{name}) || '%'
		</if>

		<!-- deptId 조건이 있을 때 -->
		<if test="deptId != null">
			<if test="deptId != null">AND</if>
			trim(D.DEPT_ID) = trim(#{deptId})
		</if>
	</if>
	</select>




	<!--사원 한명에 대한 상세정보 getOneUser -->
	<select id="getOneUser" resultType="EmployeeDto">
	SELECT EMP_ID, NAME,POSITION,EMAIL,
	DEPT_NAME, PHONE,TEL,HIRE_DATE
	FROM EMPLOYEE e
	JOIN DEPT d ON e.DEPT_ID =d.DEPT_ID
	WHERE trim(EMP_ID) = trim(#{emp_id})
	</select>
	
	<!--관리자는 사원을 등록 insertUser  -->
    <insert id="insertEmployee" parameterType="EmployeeDto">
        INSERT INTO EMPLOYEE (
            EMP_ID, DEPT_ID, NAME, PASSWORD, POSITION, BIRTH, 
            PHONE, TEL, EMAIL, HIRE_DATE, LOGIN_AUTH, R_STATE
        ) 
        VALUES (
            TO_CHAR(TO_DATE(#{hireDate}, 'YYYY-MM-DD'), 'YYYY') || 
            LPAD(EMP_SEQ.NEXTVAL, 4, '0'), 
            #{deptId}, 
            #{name}, 
            #{password}, 
            #{position}, 
            #{birth}, 
            #{phone}, 
            #{tel}, 
            #{email}, 
            TO_DATE(#{hireDate}, 'YYYY-MM-DD'), 
            #{loginAuth}, 
            #{rState}
        )
    </insert>

	<!--관리자는 사원을 수정 updateUserInfo  -->
	<update id="updateUser"
		parameterType="EmployeeDto">
		UPDATE EMPLOYEE
		SET
		DEPT_ID = #{deptId},
		trim(NAME) = trim(#{name}),
		trim(POSITION) = trim(#{position}),
		trim(PHONE) = trim(#{phone}),
		trim(TEL) = trim(#{tel}),
		trim(EMAIL) = trim(#{email}),
		trim(BIRTH) = trim(#{birth})
		WHERE trim(EMP_ID) = trim(#{emp_id})
	</update>


	<!--마이페이지에서 자신의 정보를 수정  modifyUserInfo -->
	<update id="modifyUserInfo">
		UPDATE EMPLOYEE
		SET
		trim(PHONE) = trim(#{phone}),
		trim(TEL) = trim(#{tel}),
		trim(EMAIL) = trim(#{email}),
		trim(BIRTH) = trim(#{birth})
		WHERE trim(EMP_ID) = trim(#{emp_id});
	</update>
	
	<!--마이페이지에서 자신의 정보를 조회 getOne-->
	<select id="getOne" resultType="EmployeeDto">
	SELECT e.EMP_ID, e.NAME, e.POSITION,
	e.BIRTH, e.PHONE,
	e.TEL, e.EMAIL, e.HIRE_DATE,
	d.DEPT_NAME
	FROM EMPLOYEE e
	JOIN DEPT d ON e.DEPT_ID = d.DEPT_ID
	WHERE trim(e.EMP_ID) = trim(#{emp_id});
	</select>

</mapper>

















