<?xml version="1.0" encoding="UTF-8" ?>


<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.min.edu.model.mapper.IApprovalDao">

<resultMap type="DocumentDto" id="DocumentDtoMap">
	<result property="emp_id" column="EMP_ID"/>
	<result property="doc_type" column="DOC_TYPE"/>
	<result property="title" column="TITLE"/>
	<result property="content" column="CONTENT"/>
	<result property="create_date" column="CREATE_DATE"/>
	<result property="doc_status" column="DOC_STATUS"/>
	<result property="doc_num" column="DOC_NUM"/>
	
	<collection property="approvalDtos" ofType="ApprovalDto" column="EMP_ID">
        <result property="apprv_level" column="APPRV_LEVEL"/>
        <result property="apprv_status" column="APPRV_STATUS"/>
        <result property="sign" column="SIGN"/>
    </collection>
	
</resultMap>


<!-- 사용자별로 한개의 서명만 등록할 수 있다.	insertSign -->
<insert id="insertSign" parameterType="SignDto">
	INSERT INTO SIGN (SIGN_ID, EMP_ID, SIGN)
	SELECT SIGN_SEQ.NEXTVAL, EMP_ID, #{sign}
		FROM EMPLOYEE e
		WHERE NAME = #{name}
	  	AND NOT EXISTS (SELECT 1 FROM SIGN s WHERE s.EMP_ID = e.EMP_ID)
</insert>

<select id="selectSign" resultType="SignDto">
	SELECT SIGN_ID , EMP_ID , SIGN
	FROM SIGN
</select>

<!-- 사용자는 자신의 서명을 삭제할 수 있다.	deleteSign -->
<delete id="deleteSign">
	DELETE FROM SIGN
	WHERE EMP_ID IN (SELECT EMP_ID FROM EMPLOYEE e WHERE NAME = #{name})
</delete>

<!-- 사용자는 작성중인 결재문서를 임시저장할 수 있다.	insertSaveDoc -->
<insert id="insertSaveDoc">
	<selectKey keyProperty="doc_id" resultType="Integer" order="BEFORE">
		SELECT DOCUMENT_SEQ.NEXTVAL
		FROM DUAL
	</selectKey>
	INSERT INTO DOCUMENT
	    (DOC_ID, 
	     EMP_ID,
	     DOC_TYPE, 
	     TITLE,
	     CONTENT, 
	     CREATE_DATE,
	     DOC_STATUS, 
	     DOC_DATE, 
	     FILE_ID, 
	     DOC_NUM)
	VALUES
	    (#{doc_id}, 
	    (SELECT EMP_ID FROM EMPLOYEE e WHERE NAME = #{name}),
		#{doc_type}, 
		#{title},
		#{content}, 
		SYSDATE,
		'T', 
		NULL, 
		0, 
		CASE 
			WHEN #{doc_type} = '휴가' THEN 'VACA'
			WHEN #{doc_type} = '출장' THEN 'TRIP'
			WHEN #{doc_type} = '보고서' THEN 'REPORT'
		END || '_' || TO_CHAR(SYSDATE, 'YYYY') || '_' || DOCUMENT_SEQ.NEXTVAL)
</insert>

<select id="getDocNum" resultType="String">
    SELECT DOC_NUM FROM DOCUMENT 
    WHERE EMP_ID = (SELECT EMP_ID FROM EMPLOYEE WHERE NAME = #{name}) 
    ORDER BY CREATE_DATE DESC 
    FETCH FIRST 1 ROWS ONLY
</select>

<!-- 사용자는 임시저장한 문서를 삭제할 수 있다.	deleteSaveDoc -->
<delete id="deleteSaveDoc">
	DELETE FROM DOCUMENT d 
	WHERE DOC_ID IN (SELECT SUBSTR(DOC_NUM,-1) FROM DOCUMENT d WHERE DOC_NUM = #{doc_num})
	AND EMP_ID IN (SELECT EMP_ID FROM EMPLOYEE e WHERE NAME = #{name})
</delete>

<!-- 사용자는 작성한 결재문서를 결재하기 전에 미리보기를 할 수 있다.	selectPreviewDoc -->
<select id="selectPreviewDoc" resultMap="DocumentDtoMap">
	SELECT s.EMP_ID , a.APPRV_LEVEL , a.APPRV_STATUS , a.SIGN ,
			s.DOC_TYPE , s.TITLE , s.CONTENT, s.CREATE_DATE , s.DOC_STATUS , s.DOC_NUM
		FROM 
		    (SELECT *
		     FROM DOCUMENT d
		     WHERE EMP_ID IN (SELECT EMP_ID FROM EMPLOYEE e WHERE NAME = #{name})
		     AND DOC_NUM = #{doc_num}) s
		LEFT OUTER JOIN APPROVAL a 
		    ON s.EMP_ID = a.EMP_ID
</select>

<select id="selectTree" resultType="Map">
<![CDATA[
SELECT 'company' AS "id", 
       '#' AS "parent", 
       '회사' AS "text", 
       '1' AS "opened" 
FROM DUAL
UNION ALL
SELECT TO_CHAR(dept_id) AS "id", 
       'company' AS "parent", 
       dept_name AS "text", 
       '0' AS "opened" 
FROM DEPT
UNION ALL
SELECT EMP_ID AS "id", 
       TO_CHAR(dept_id) AS "parent", 
       name || ' (' || position || ')' AS "text", 
       '0' AS "opened" 
FROM EMPLOYEE
]]>
</select>

<!-- 상신하기 +문서 생성 -->
<insert id="insertDocument">
<selectKey keyProperty="doc_id" resultType="Integer" order="BEFORE">
		SELECT DOCUMENT_SEQ.NEXTVAL
		FROM DUAL
	</selectKey>
	INSERT INTO DOCUMENT
	    (DOC_ID, 
	     EMP_ID,
	     DOC_TYPE, 
	     TITLE,
	     CONTENT, 
	     CREATE_DATE,
	     DOC_STATUS, 
	     DOC_DATE, 
	     FILE_ID, 
	     DOC_NUM)
	VALUES
	    (#{doc_id}, 
	    #{emp_id},
		#{doc_type}, 
		#{title},
		#{content}, 
		CURRENT_DATE,
		'N', 
		NULL, 
		0, 
		CASE 
			WHEN #{doc_type} = '휴가' THEN 'VACA'
			WHEN #{doc_type} = '출장' THEN 'TRIP'
			WHEN #{doc_type} = '보고서' THEN 'REPORT'
		END || '_' || TO_CHAR(SYSDATE, 'YYYY') || '_' || DOCUMENT_SEQ.NEXTVAL)
</insert>

<!-- 결재 생성 -->
<insert id="insertApproval">

	<selectKey keyProperty="apprv_id" resultType="java.lang.Integer" order="BEFORE">
		SELECT MAX(APPRV_ID)+1 FROM APPROVAL
	</selectKey>
	
	INSERT INTO APPROVAL (APPRV_ID, DOC_ID, EMP_ID, APPRV_LEVEL, APPRV_STATUS, SIGN)
	<foreach collection="approval" item="app" separator=" UNION ALL " index="idx">
	SELECT #{apprv_id}+${idx}, #{doc_id}, #{app.emp_id}, ${idx}+1, '진행중', #{app.sign,  jdbcType=VARCHAR} FROM DUAL
	</foreach>
	
</insert>


</mapper>